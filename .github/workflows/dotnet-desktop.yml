name: .NET build & test (cross-platform + coverage)

on:
  workflow_dispatch:
  push:
    branches: [ main, releases/** ]
  pull_request:
    branches: [ main, releases/** ]

permissions:
  contents: read
  id-token: write

jobs:
  build:
    name: build-test-${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        dotnet: [ '9.0.x' ]
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET ${{ matrix.dotnet }} (include preview)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet }}
          include-prerelease: true

      - name: Restore
        run: dotnet restore ApiConsoleClient.sln --configfile nuget.config

      - name: Build (Release)
        run: dotnet build ApiConsoleClient.sln -c Release --no-restore --configfile nuget.config

      - name: Test (Release) with Coverage (Coverlet Collector)
        run: >-
          dotnet test ApiConsoleClient.sln -c Release --no-build --no-restore --settings coverlet.runsettings
          --logger "trx;LogFileName=test-results.trx"
          --collect:"XPlat Code Coverage"


      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}
          path: |
            **/TestResults/**/*.trx
            **/TestResults/**/coverage.cobertura.xml
            **/coverage/**

  coverage-merge:
    name: merge-coverage
    runs-on: ubuntu-latest
    needs: build
    env:
      MIN_COVERAGE: '30'
    steps:
      - name: Checkout (for paths)
        uses: actions/checkout@v4

      - name: Download test artifacts (all OS)
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          path: artifacts
          merge-multiple: true

      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

      - name: Merge coverage reports
        shell: bash
        run: |
          REPORTS=$(find artifacts -type f -name 'coverage.cobertura.xml' | tr '\n' ';')
          reportgenerator -reports:"$REPORTS" -targetdir:"coverage" -reporttypes:"Cobertura;HtmlInline_AzurePipelines;TextSummary"

      - name: Show coverage summary
        shell: bash
        run: |
          if [ -f coverage/Summary.txt ]; then cat coverage/Summary.txt; fi

      - name: Coverage gate (fail if below minimum)
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: 'coverage/Cobertura.xml'
          badge: true
          fail_below_min: true
          # thresholds: [min fail threshold] [success threshold for green badge]
          thresholds: ${{ env.MIN_COVERAGE }} 90

      - name: Upload merged coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-merged
          path: coverage/**

      - name: Upload to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: coverage/Cobertura.xml
          flags: unittests
          name: codecov-coverage
