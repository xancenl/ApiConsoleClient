// <auto-generated/>
#nullable enable
using System; using System.Linq; using System.Threading; using System.Threading.Tasks; using System.Net.Http; using Flurl; using Flurl.Http; using System.Text.Json; using ApiConsoleClient.Models;
namespace ApiConsoleClient.ApiClient;
internal partial class ApiClient
{
    internal async Task<System.Collections.Generic.List<MontaModel_Efulfillment_Returns_Forecasts_Forecast>> GetReturnforecastAsync(GetReturnforecastRequest req, System.Threading.CancellationToken cancellationToken = default)
    {
        try
        {
            var path = "/returnforecast";
            var url = new Url(_options.BaseUrl).AppendPathSegment(path.TrimStart('/'), false);
            var flreq = CreateRequest(url);
            var q = new System.Collections.Generic.Dictionary<string, object?>();
            if (req.CreatedSince is not null) q["created_since"] = ((System.DateTimeOffset)req.CreatedSince).ToString("yyyy-MM-ddTHH:mm:ssK", System.Globalization.CultureInfo.InvariantCulture);
            if (req.CreatedUntil is not null) q["created_until"] = ((System.DateTimeOffset)req.CreatedUntil).ToString("yyyy-MM-ddTHH:mm:ssK", System.Globalization.CultureInfo.InvariantCulture);
            if (req.Page is not null) q["page"] = Convert.ToString(req.Page, System.Globalization.CultureInfo.InvariantCulture);
            if (req.PageSize is not null) q["page_size"] = Convert.ToString(req.PageSize, System.Globalization.CultureInfo.InvariantCulture);
            if (req.GetCountOnly is not null) q["get_count_only"] = (Convert.ToString(req.GetCountOnly) ?? string.Empty).ToLowerInvariant();
            if (q.Count > 0) flreq = flreq.SetQueryParams(q, Flurl.NullValueHandling.Remove);
            var resp = await flreq.SendAsync(new HttpMethod("GET"), null, completionOption: System.Net.Http.HttpCompletionOption.ResponseContentRead, cancellationToken: cancellationToken).ConfigureAwait(false);
            return await ReadJsonAsync<System.Collections.Generic.List<MontaModel_Efulfillment_Returns_Forecasts_Forecast>>(resp).ConfigureAwait(false);
        }
        catch (FlurlHttpException ex)
        {
            throw await BuildApiExceptionAsync(ex).ConfigureAwait(false);
        }
    }
}
