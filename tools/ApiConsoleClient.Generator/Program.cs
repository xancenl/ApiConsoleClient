using System.Text;
using Microsoft.OpenApi.Any;
using Microsoft.OpenApi.Models;
using Microsoft.OpenApi.Readers;

namespace ApiConsoleClient.Generator;

internal static class Program
{
    public static async Task<int> Main(string[] args)
    {
        var specUrl = args.FirstOrDefault() ?? "https://api-v6.monta.nl/swagger/v6/swagger.json";
        var workspace = FindWorkspaceRoot();
        var outModels = Path.Combine(workspace, "src", "ApiConsoleClient", "Models");
        var outClient = Path.Combine(workspace, "src", "ApiConsoleClient", "ApiClient");
        var outTests = Path.Combine(workspace, "tests", "ApiConsoleClient.Tests", "Generated");

        Directory.CreateDirectory(outModels);
        Directory.CreateDirectory(outClient);
        Directory.CreateDirectory(outTests);

        Console.WriteLine($"Reading OpenAPI: {specUrl}");
        var doc = await LoadOpenApiAsync(new Uri(specUrl)).ConfigureAwait(false);

        var gen = new CodeGen(doc);
        gen.GenerateModels(outModels);
        gen.GenerateClient(outClient);
        gen.GenerateDispatcher(outClient);
        gen.GenerateTests(outTests);

        Console.WriteLine($"Generated {gen.Operations.Count} operations and {gen.Models.Count} models, with tests.");
        return 0;
    }

    private static async Task<OpenApiDocument> LoadOpenApiAsync(Uri url)
    {
        using var http = new HttpClient { Timeout = TimeSpan.FromSeconds(60) };
        using var resp = await http.GetAsync(url).ConfigureAwait(false);
        resp.EnsureSuccessStatusCode();
        await using var s = await resp.Content.ReadAsStreamAsync().ConfigureAwait(false);
        var reader = new OpenApiStreamReader();
        var read = await reader.ReadAsync(s).ConfigureAwait(false);
        if (read.OpenApiDiagnostic.Errors?.Count > 0)
        {
            await Console.Error.WriteLineAsync(string.Join(Environment.NewLine, read.OpenApiDiagnostic.Errors.Select(e => e.ToString()))).ConfigureAwait(false);
        }
        return read.OpenApiDocument!;
    }

    private static string FindWorkspaceRoot()
    {
        var dir = Directory.GetCurrentDirectory();
        while (dir is not null)
        {
            if (File.Exists(Path.Combine(dir, "ApiConsoleClient.sln")))
                return dir;
            var parent = Directory.GetParent(dir);
            dir = parent?.FullName!;
        }
        return Directory.GetCurrentDirectory();
    }
}

internal sealed class CodeGen
{
    private readonly OpenApiDocument _doc;
    public CodeGen(OpenApiDocument doc) => _doc = doc;

    public IDictionary<string, OpenApiSchema> Models => _doc.Components.Schemas;
    public List<Op> Operations { get; } = new();

    private static readonly char[] SplitChars = new[] { '-', '_', '.', ' ' };

    public void GenerateModels(string outDir)
    {
        foreach (var (name, schema) in _doc.Components.Schemas)
        {
            var typeName = SanitizeIdentifier(name);
            var code = GenerateModelCode(typeName, schema);
            File.WriteAllText(Path.Combine(outDir, typeName + ".g.cs"), code);
        }
    }

    public void GenerateClient(string outDir)
    {
        Operations.Clear();
        foreach (var (path, item) in _doc.Paths)
        {
            foreach (var (method, op) in item.Operations)
            {
                var opId = SanitizeIdentifier(op.OperationId ?? MakeOperationId(method, path));
                var opInfo = new Op(opId, method, path, op);
                Operations.Add(opInfo);

                var code = GenerateOperationMethod(opInfo);
                File.WriteAllText(Path.Combine(outDir, opId + ".g.cs"), code);
                var reqCode = GenerateRequestDto(opInfo);
                File.WriteAllText(Path.Combine(outDir, opId + ".Request.g.cs"), reqCode);
            }
        }
    }

    public void GenerateDispatcher(string outDir)
    {
        var sb = new StringBuilder();
        sb.AppendLine("// <auto-generated />");
        sb.AppendLine("#nullable enable");
        sb.AppendLine("namespace ApiConsoleClient.ApiClient;");
        sb.AppendLine("internal partial class ApiClient");
        sb.AppendLine("{");
        sb.AppendLine("    private partial System.Collections.Generic.IEnumerable<string> GeneratedListOperationIds() => new [] {");
        foreach (var op in Operations.OrderBy(o => o.Id, StringComparer.OrdinalIgnoreCase))
            sb.AppendLine($"        \"{op.Id}\",");
        sb.AppendLine("    };");
        sb.AppendLine();
        sb.AppendLine("    private partial async System.Threading.Tasks.Task<object?> GeneratedExecuteAsync(string operationId, string? inputJson, System.Threading.CancellationToken cancellationToken)");
        sb.AppendLine("    {");
        sb.AppendLine("        switch (operationId)");
        sb.AppendLine("        {");
        foreach (var op in Operations)
        {
            sb.AppendLine($"            case \"{op.Id}\":");
            sb.AppendLine($"                var req_{op.Id} = inputJson is null ? new {op.Id}Request() : System.Text.Json.JsonSerializer.Deserialize<{op.Id}Request>(inputJson, ApiConsoleClient.ApiClient.JsonOptions.Default)!;");
            var retType = GetResponseTypeName(op);
            if (retType == "void")
            {
                sb.AppendLine($"                await {op.Id}Async(req_{op.Id}, cancellationToken).ConfigureAwait(false);");
                sb.AppendLine("                return null;");
            }
            else
            {
                sb.AppendLine($"                var res_{op.Id} = await {op.Id}Async(req_{op.Id}, cancellationToken).ConfigureAwait(false);");
                sb.AppendLine($"                return (object?)res_{op.Id};");
            }
        }
        sb.AppendLine("            default: throw new System.ArgumentOutOfRangeException(nameof(operationId), operationId, \"Unknown operationId\");");
        sb.AppendLine("        }");
        sb.AppendLine("    }");
        sb.AppendLine("}");

        File.WriteAllText(Path.Combine(outDir, "Generated.Operations.g.cs"), sb.ToString());
    }

    public void GenerateTests(string outDir)
    {
    var testHeader = "// <auto-generated/>\n"
               + "#nullable enable\n"
               + "using System;\n"
               + "using System.Threading;\n"
               + "using System.Threading.Tasks;\n"
               + "using FluentAssertions;\n"
               + "using Flurl.Http;\n"
               + "using Flurl.Http.Testing;\n"
               + "using Microsoft.Extensions.Logging.Abstractions;\n"
               + "using ApiConsoleClient.ApiClient;\n"
               + "using ApiConsoleClient.Models;\n"
               + "using Xunit;\n";
        Directory.CreateDirectory(outDir);
    var helper = "namespace ApiConsoleClient.Tests { internal sealed class NoAuth : ApiConsoleClient.ApiClient.IAuthHeaderProvider { public System.Collections.Generic.IReadOnlyDictionary<string,string> GetAuthHeaders() => new System.Collections.Generic.Dictionary<string,string>(); } }";
    File.WriteAllText(Path.Combine(outDir, "_TestSupport.g.cs"), "// <auto-generated/>\n#nullable enable\n" + helper);

        foreach (var op in Operations)
        {
            var retType = GetResponseTypeName(op);
            var sb = new StringBuilder();
            sb.AppendLine(testHeader);
            sb.AppendLine("namespace ApiConsoleClient.Tests.Generated;");
            sb.AppendLine($"public sealed class {op.Id}Tests");
            sb.AppendLine("{");
            sb.AppendLine($"    [Fact]\n    public async Task {op.Id}_HappyPath()\n    {{");
            sb.AppendLine("        using var http = new HttpTest();");
            var respExpr = SampleResponseExpr(op);
            sb.AppendLine($"        http.RespondWithJson({respExpr});");
            sb.AppendLine("        var client = new ApiConsoleClient.ApiClient.ApiClient(new NullLogger<ApiConsoleClient.ApiClient.ApiClient>(), new ApiConsoleClient.ApiClient.ApiClientOptions { BaseUrl = new Uri(\"https://api.test\") }, new ApiConsoleClient.Tests.NoAuth());");
            sb.AppendLine($"        var req = {SampleNewRequest(op)};");
            if (retType == "void")
            {
                sb.AppendLine($"        await client.{op.Id}Async(req, System.Threading.CancellationToken.None);");
            }
            else
            {
                sb.AppendLine($"        var result = await client.{op.Id}Async(req, System.Threading.CancellationToken.None);");
                // Rely on the HTTP assertion below; different return types (including primitives) are not uniformly assertable
            }
            var expectedUrl = BuildExpectedUrlString(op);
            var httpMethodExpr = op.Method switch
            {
                OperationType.Get => "System.Net.Http.HttpMethod.Get",
                OperationType.Post => "System.Net.Http.HttpMethod.Post",
                OperationType.Put => "System.Net.Http.HttpMethod.Put",
                OperationType.Delete => "System.Net.Http.HttpMethod.Delete",
                OperationType.Patch => "System.Net.Http.HttpMethod.Patch",
                OperationType.Head => "System.Net.Http.HttpMethod.Head",
                OperationType.Options => "System.Net.Http.HttpMethod.Options",
                _ => "new System.Net.Http.HttpMethod(\"" + op.Method.ToString().ToUpperInvariant() + "\")"
            };
            sb.AppendLine($"        http.ShouldHaveCalled(\"{expectedUrl}\").WithVerb({httpMethodExpr});");
            sb.AppendLine("    }");

            sb.AppendLine($"    [Fact]\n    public async Task {op.Id}_ErrorPath()\n    {{");
            sb.AppendLine("        using var http = new HttpTest();");
            sb.AppendLine("        http.RespondWith(\"{\\\"type\\\":\\\"https://example/problem\\\",\\\"title\\\":\\\"Bad Request\\\"}\", 400, new System.Collections.Generic.Dictionary<string,string> { [\"Content-Type\"] = \"application/problem+json\" });");
            sb.AppendLine("        var client = new ApiConsoleClient.ApiClient.ApiClient(new NullLogger<ApiConsoleClient.ApiClient.ApiClient>(), new ApiConsoleClient.ApiClient.ApiClientOptions { BaseUrl = new Uri(\"https://api.test\") }, new ApiConsoleClient.Tests.NoAuth());");
            sb.AppendLine($"        var req = {SampleNewRequest(op)};");
            sb.AppendLine($"        var act = async () => await client.{op.Id}Async(req, System.Threading.CancellationToken.None);");
            sb.AppendLine("        await act.Should().ThrowAsync<ApiConsoleClient.ApiClient.ApiException>();");
            sb.AppendLine("    }");

            sb.AppendLine("}");
            File.WriteAllText(Path.Combine(outDir, op.Id + ".Tests.g.cs"), sb.ToString());
        }
    }

    private string GenerateModelCode(string name, OpenApiSchema schema)
    {
        if (schema.Enum?.Count > 0)
        {
            var sb = new StringBuilder();
            sb.AppendLine("// <auto-generated/>");
            sb.AppendLine("#nullable enable");
            sb.AppendLine("using System.Text.Json.Serialization;");
            sb.AppendLine("namespace ApiConsoleClient.Models;");
            sb.AppendLine("[JsonConverter(typeof(JsonStringEnumConverter))]");
            sb.AppendLine($"internal enum {name}");
            sb.AppendLine("{");
            var i = 0;
            foreach (var ev in schema.Enum)
            {
                var sval = ev is OpenApiString os ? os.Value : ev.ToString();
                var member = SanitizeIdentifier((sval ?? ("Value" + i)).Trim('\"'));
                sb.AppendLine($"    {member} = {i},");
                i++;
            }
            sb.AppendLine("}");
            return sb.ToString();
        }

        if (schema.Type == "array" && schema.Items is not null)
        {
            var itemType = ResolveType(schema.Items, true);
            return "// <auto-generated/>\n#nullable enable\nnamespace ApiConsoleClient.Models;\ninternal class " + name + " : System.Collections.Generic.List<" + itemType + "> { }\n";
        }

        if (schema.AllOf?.Count > 0)
        {
            var merged = new OpenApiSchema { Properties = new Dictionary<string, OpenApiSchema>() };
            foreach (var part in schema.AllOf)
            {
                var s = Deref(part);
                foreach (var (pname, ps) in s.Properties)
                    merged.Properties[pname] = ps;
            }
            schema = merged;
        }

        var sbc = new StringBuilder();
        sbc.AppendLine("// <auto-generated/>");
        sbc.AppendLine("#nullable enable");
        sbc.AppendLine("using System.Text.Json.Serialization;");
        sbc.AppendLine("namespace ApiConsoleClient.Models;");
        sbc.AppendLine($"internal partial class {name}");
        sbc.AppendLine("{");
        var usedNames = new System.Collections.Generic.HashSet<string>(System.StringComparer.Ordinal);
        foreach (var (pname, pschema) in schema.Properties)
        {
            var propType = ResolveType(pschema, !schema.Required.Contains(pname));
            var baseName = SanitizeIdentifier(ToPascalCase(pname));
            var csName = MakeUniqueName(usedNames, baseName);
            usedNames.Add(csName);
            sbc.AppendLine($"    [JsonPropertyName(\"{pname}\")] public {propType} {csName} {{ get; set; }} = default!;");
        }
        sbc.AppendLine("}");
        return sbc.ToString();
    }

    private static string MakeUniqueName(System.Collections.Generic.HashSet<string> used, string baseName)
    {
        if (!used.Contains(baseName)) return baseName;
        var i = 2;
        while (true)
        {
            var candidate = baseName + i.ToString(System.Globalization.CultureInfo.InvariantCulture);
            if (!used.Contains(candidate)) return candidate;
            i++;
        }
    }

    private static string ResolveType(OpenApiSchema schema, bool nullable)
    {
        if (schema.Reference?.Id is string refId)
        {
            var typeName = SanitizeIdentifier(refId);
            return typeName + (nullable ? "?" : string.Empty);
        }
        var t = schema.Type;
        switch (t)
        {
            case "string":
                if (schema.Format == "date-time" || schema.Format == "date") return (nullable ? "System.DateTimeOffset?" : "System.DateTimeOffset");
                return nullable ? "string?" : "string";
            case "integer": return nullable ? "int?" : "int";
            case "number": return nullable ? "double?" : "double";
            case "boolean": return nullable ? "bool?" : "bool";
            case "array":
                var it = ResolveType(schema.Items!, false);
                return $"System.Collections.Generic.List<{it}>" + (nullable ? "?" : string.Empty);
            case "object":
                return nullable ? "System.Text.Json.Nodes.JsonObject?" : "System.Text.Json.Nodes.JsonObject";
        }
        return nullable ? "object?" : "object";
    }

    private static string SanitizeIdentifier(string name)
    {
        if (string.IsNullOrWhiteSpace(name)) return "Unnamed";
        var sb = new StringBuilder();
        if (!char.IsLetter(name[0]) && name[0] != '_') sb.Append('_');
        foreach (var ch in name)
            sb.Append(char.IsLetterOrDigit(ch) ? ch : '_');
        return sb.ToString();
    }

    private static string ToPascalCase(string input)
    {
        var parts = input.Split(SplitChars, StringSplitOptions.RemoveEmptyEntries);
        return string.Concat(parts.Select(p => char.ToUpperInvariant(p[0]) + p[1..]));
    }

    private static string MakeOperationId(OperationType method, string path)
    {
        var parts = path.Trim('/')
            .Split('/', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries)
            .Select(p => new string([.. p.Where(char.IsLetterOrDigit)]))
            .Where(p => p.Length > 0)
            .Select(p => char.ToUpperInvariant(p[0]) + (p.Length > 1 ? p[1..] : string.Empty))
            .ToArray();
        return method.ToString() + string.Join(string.Empty, parts);
    }

    private OpenApiSchema Deref(OpenApiSchema s)
        => s.Reference?.Id is string id && _doc.Components.Schemas.TryGetValue(id, out var real) ? real : s;

    private static string GenerateOperationMethod(Op op)
    {
        var sb = new StringBuilder();
        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine("#nullable enable");
        sb.AppendLine("using System; using System.Linq; using System.Threading; using System.Threading.Tasks; using System.Net.Http; using Flurl; using Flurl.Http; using System.Text.Json; using ApiConsoleClient.Models;");
        sb.AppendLine("namespace ApiConsoleClient.ApiClient;");
        sb.AppendLine("internal partial class ApiClient");
        sb.AppendLine("{");
        var retType = GetResponseTypeName(op);
        if (retType == "void")
            sb.AppendLine($"    internal async Task {op.Id}Async({op.Id}Request req, System.Threading.CancellationToken cancellationToken = default)\n    {{");
        else
            sb.AppendLine($"    internal async Task<{retType}> {op.Id}Async({op.Id}Request req, System.Threading.CancellationToken cancellationToken = default)\n    {{");
        sb.AppendLine("        try");
        sb.AppendLine("        {");
        sb.AppendLine($"            var path = \"{op.Path}\";");
        foreach (var p in op.PathParams)
        {
            var pn = p.Name;
            var csProp = SanitizeIdentifier(ToPascalCase(pn));
            // Handle case mismatches between template token and parameter name, and normalize booleans to lowercase in path
            var tokenExact = "{" + pn + "}";
            var tokenPascal = "{" + ToPascalCase(pn) + "}";
            if (p.Schema.Type == "boolean")
            {
                sb.AppendLine($"            var __val_{csProp} = (Convert.ToString(req.{csProp}) ?? string.Empty).ToLowerInvariant();");
            }
            else if (p.Schema.Format == "date-time" || p.Schema.Format == "date")
            {
                // format as ISO without fractions
                sb.AppendLine($"            var __val_{csProp} = req.{csProp} is null ? string.Empty : ((System.DateTimeOffset)req.{csProp}).ToString(\"yyyy-MM-ddTHH:mm:ssK\", System.Globalization.CultureInfo.InvariantCulture);");
            }
            else
            {
                sb.AppendLine($"            var __val_{csProp} = Convert.ToString(req.{csProp}, System.Globalization.CultureInfo.InvariantCulture) ?? string.Empty;");
            }
            sb.AppendLine($"            path = path.Replace(\"{tokenExact}\", __val_{csProp});");
            sb.AppendLine($"            path = path.Replace(\"{tokenPascal}\", __val_{csProp});");
        }
    sb.AppendLine("            var url = new Url(_options.BaseUrl).AppendPathSegment(path.TrimStart('/'), false);");
        sb.AppendLine("            var flreq = CreateRequest(url);");
        foreach (var h in op.HeaderParams)
        {
            var csProp = SanitizeIdentifier(ToPascalCase(h.Name));
            sb.AppendLine($"            if (req.{csProp} is not null) flreq = flreq.WithHeader(\"{h.Name}\", req.{csProp});");
        }
        sb.AppendLine("            var q = new System.Collections.Generic.Dictionary<string, object?>();");
        foreach (var qparam in op.QueryParams)
        {
            var csProp = SanitizeIdentifier(ToPascalCase(qparam.Name));
            if (qparam.Schema.Type == "boolean")
            {
                sb.AppendLine($"            if (req.{csProp} is not null) q[\"{qparam.Name}\"] = (Convert.ToString(req.{csProp}) ?? string.Empty).ToLowerInvariant();");
            }
            else if (qparam.Schema.Format == "date-time" || qparam.Schema.Format == "date")
            {
                sb.AppendLine($"            if (req.{csProp} is not null) q[\"{qparam.Name}\"] = ((System.DateTimeOffset)req.{csProp}).ToString(\"yyyy-MM-ddTHH:mm:ssK\", System.Globalization.CultureInfo.InvariantCulture);");
            }
            else
            {
                sb.AppendLine($"            if (req.{csProp} is not null) q[\"{qparam.Name}\"] = Convert.ToString(req.{csProp}, System.Globalization.CultureInfo.InvariantCulture);");
            }
        }
        sb.AppendLine("            if (q.Count > 0) flreq = flreq.SetQueryParams(q, Flurl.NullValueHandling.Remove);");

        var httpMethod = op.Method.ToString().ToUpperInvariant();
        if (op.Body is not null)
        {
            sb.AppendLine($"            var resp = await flreq.SendJsonAsync(new HttpMethod(\"{httpMethod}\"), req.Body!, cancellationToken: cancellationToken).ConfigureAwait(false);");
        }
        else
        {
            sb.AppendLine($"            var resp = await flreq.SendAsync(new HttpMethod(\"{httpMethod}\"), null, completionOption: System.Net.Http.HttpCompletionOption.ResponseContentRead, cancellationToken: cancellationToken).ConfigureAwait(false);");
        }
        if (retType == "byte[]")
        {
            sb.AppendLine("            return await resp.ResponseMessage.Content.ReadAsByteArrayAsync(System.Threading.CancellationToken.None).ConfigureAwait(false);");
        }
        else if (retType == "void" || retType == "System.Void")
        {
            sb.AppendLine("            return;");
        }
        else
        {
            sb.AppendLine($"            return await ReadJsonAsync<{retType}>(resp).ConfigureAwait(false);");
        }
        sb.AppendLine("        }");
        sb.AppendLine("        catch (FlurlHttpException ex)");
        sb.AppendLine("        {");
        sb.AppendLine("            throw await BuildApiExceptionAsync(ex).ConfigureAwait(false);");
        sb.AppendLine("        }");
        sb.AppendLine("    }");
        sb.AppendLine("}");
        return sb.ToString();
    }

    private static string GetResponseTypeName(Op op)
    {
        foreach (var code in new[] { "200", "201", "202", "204" })
        {
            if (!op.Operation.Responses.TryGetValue(code, out var resp)) continue;
            if (code == "204") return "void";
            if (resp.Content?.Count > 0)
            {
                foreach (var (ct, media) in resp.Content)
                {
                    if (ct.Contains("octet-stream")) return "byte[]";
                    if (media.Schema is not null)
                    {
                        var t = ResolveType(media.Schema, false);
                        return t.Replace("System.Text.Json.Nodes.JsonObject", "object");
                    }
                }
            }
        }
        return "object";
    }

    private static string GenerateRequestDto(Op op)
    {
        var sb = new StringBuilder();
        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine("#nullable enable");
        sb.AppendLine("using System.Text.Json.Serialization;");
        sb.AppendLine("using ApiConsoleClient.Models;");
        sb.AppendLine("namespace ApiConsoleClient.ApiClient;");
        sb.AppendLine($"internal sealed class {op.Id}Request");
        sb.AppendLine("{");
        foreach (var p in op.PathParams.Concat(op.QueryParams).Concat(op.HeaderParams))
        {
            var t = ResolveType(p.Schema, true);
            var name = SanitizeIdentifier(ToPascalCase(p.Name));
            sb.AppendLine($"    public {t} {name} {{ get; set; }} = default!;");
        }
        if (op.Body is not null)
        {
            var bt = ResolveType(op.Body, true);
            sb.AppendLine($"    public {bt} Body {{ get; set; }} = default!;");
        }
        sb.AppendLine("}");
        return sb.ToString();
    }

    private static string SampleResponseExpr(Op op)
    {
        var retType = GetResponseTypeName(op);
        // Collections => empty array of inner type
        const string listPrefix = "System.Collections.Generic.List<";
        if (retType.StartsWith(listPrefix, StringComparison.Ordinal))
        {
            var inner = retType.Substring(listPrefix.Length, retType.Length - listPrefix.Length - 1);
            return $"System.Array.Empty<{inner}>()";
        }
        // byte[]: respond with an empty byte-array-like content (as base64 string). But RespondWithJson expects JSON;
        // return an empty string which deserializes to byte[] only if endpoint isn't used. Such endpoints are unlikely in tests; fallback to empty array.
        if (retType == "byte[]") return "System.Array.Empty<byte>()";
        // object or complex model types => default instance
        if (retType == "object") return "new { }";
        if (retType.StartsWith("ApiConsoleClient.Models.", StringComparison.Ordinal)) return $"new {retType}()";
        // Nullable types
        if (retType == "string" || retType == "string?") return "\"sample\"";
        if (retType == "int" || retType == "int?") return "123";
        if (retType == "double" || retType == "double?") return "1.23";
        if (retType == "bool" || retType == "bool?") return "true";
        if (retType == "System.DateTimeOffset" || retType == "System.DateTimeOffset?") return "new System.DateTimeOffset(2000,1,2,3,4,5, System.TimeSpan.Zero)";
        // Enums (string-converted) or unknown model structs
        if (retType.Contains("ApiConsoleClient.Models.", StringComparison.Ordinal)) return $"default({retType})";
        return "new { }";
    }

    private string SampleNewRequest(Op op)
    {
        var inits = new List<string>();
        foreach (var p in op.PathParams.Concat(op.QueryParams).Concat(op.HeaderParams))
        {
            string v;
            // Handle enums (by $ref)
            if (p.Schema.Reference?.Id is string refId && _doc.Components.Schemas.TryGetValue(refId, out var refSchema) && refSchema.Enum?.Count > 0)
            {
                var enumType = SanitizeIdentifier(refId);
                var first = refSchema.Enum.First();
                var sval = first is OpenApiString os ? os.Value : first.ToString()?.Trim('"');
                var member = SanitizeIdentifier((sval ?? "Value0"));
                v = $"ApiConsoleClient.Models.{enumType}.{member}";
            }
            // Handle enums (inline or when ref mapping is opaque) by resolving the property type name back to a component schema
            else if (TryGetEnumFromResolvedType(p.Schema, out var enumTypeName, out var enumMember))
            {
                v = $"ApiConsoleClient.Models.{enumTypeName}.{enumMember}";
            }
            else if (p.Schema.Format == "date-time" || p.Schema.Format == "date")
            {
                v = "new System.DateTimeOffset(2000,1,2,3,4,5, System.TimeSpan.Zero)";
            }
            else
            {
                v = p.Schema.Type switch
                {
                    "string" => "\"x\"",
                    "integer" => "1",
                    "number" => "1",
                    "boolean" => "true",
                    _ => "\"x\""
                };
            }

            var name = SanitizeIdentifier(ToPascalCase(p.Name));
            inits.Add($"{name} = {v}");
        }
        if (op.Body is not null)
        {
            // prefer default! to satisfy any typed model
            inits.Add("Body = default!");
        }
        return $"new {op.Id}Request {{ {string.Join(", ", inits)} }}";
    }

    private bool TryGetEnumFromResolvedType(OpenApiSchema schema, out string enumTypeName, out string enumMember)
    {
        enumTypeName = string.Empty;
        enumMember = string.Empty;
        // Determine the type name as our generator would emit it
        var resolved = ResolveType(schema, true);
        if (string.IsNullOrEmpty(resolved)) return false;
        var nonNull = resolved.TrimEnd('?');
        // Find a components schema whose sanitized name matches this type
        var match = _doc.Components.Schemas.FirstOrDefault(kv => SanitizeIdentifier(kv.Key) == nonNull);
        if (match.Value is null) return false;
        if (match.Value.Enum is null || match.Value.Enum.Count == 0) return false;
        enumTypeName = nonNull;
        var first = match.Value.Enum.First();
        var sval = first is OpenApiString os ? os.Value : first.ToString()?.Trim('"');
        enumMember = SanitizeIdentifier((sval ?? "Value0"));
        return true;
    }

    private string BuildExpectedUrlString(Op op)
    {
        var path = op.Path;
        foreach (var p in op.PathParams)
        {
            var name = p.Name;
            string repl;
            if (p.Schema.Reference?.Id is string refId && _doc.Components.Schemas.TryGetValue(refId, out var refSchema) && refSchema.Enum?.Count > 0)
            {
                // URL building uses Convert.ToString(enum) -> enum member name
                var first = refSchema.Enum.First();
                var sval = first is OpenApiString os ? os.Value : first.ToString()?.Trim('"');
                repl = SanitizeIdentifier(sval ?? "Value0");
            }
            else if (p.Schema.Format == "date-time" || p.Schema.Format == "date")
            {
                repl = "2000-01-02T03:04:05+00:00";
            }
            else
            {
                repl = p.Schema.Type switch
                {
                    "string" => "x",
                    "integer" => "1",
                    "number" => "1",
                    // booleans in path are lower-case in our client implementation
                    "boolean" => "true",
                    _ => "x"
                };
            }
            var tokenExact = "{" + name + "}";
            var tokenPascal = "{" + ToPascalCase(name) + "}";
            path = path.Replace(tokenExact, repl);
            path = path.Replace(tokenPascal, repl);
        }
        string FormatQuery(OpenApiParameter qp)
        {
            string v;
            if (qp.Schema.Reference?.Id is string refId && _doc.Components.Schemas.TryGetValue(refId, out var refSchema) && refSchema.Enum?.Count > 0)
            {
                var first = refSchema.Enum.First();
                var sval = first is OpenApiString os ? os.Value : first.ToString()?.Trim('"');
                v = SanitizeIdentifier(sval ?? "Value0");
            }
            else if (qp.Schema.Format == "date-time" || qp.Schema.Format == "date")
            {
                v = "2000-01-02T03:04:05+00:00";
            }
            else
            {
                v = qp.Schema.Type switch
                {
                    "string" => "x",
                    "integer" => "1",
                    "number" => "1",
                    "boolean" => "true",
                    _ => "x"
                };
            }
            // Query values are URL-encoded by Flurl; encode here to match
            var enc = Uri.EscapeDataString(v);
            return qp.Name + "=" + enc;
        }
        var q = string.Join("&", op.QueryParams.Select(FormatQuery));
        return op.QueryParams.Count == 0 ? $"https://api.test{path}" : $"https://api.test{path}?{q}";
    }
}

internal sealed record Op(string Id, OperationType Method, string Path, OpenApiOperation Operation)
{
    public List<OpenApiParameter> PathParams { get; } = Operation.Parameters.Where(p => p.In == ParameterLocation.Path).ToList();
    public List<OpenApiParameter> QueryParams { get; } = Operation.Parameters.Where(p => p.In == ParameterLocation.Query).ToList();
    public List<OpenApiParameter> HeaderParams { get; } = Operation.Parameters.Where(p => p.In == ParameterLocation.Header).ToList();
    public OpenApiSchema? Body { get; } = Operation.RequestBody?.Content?.Values?.FirstOrDefault()?.Schema;
}

